name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            ext: .exe
            label: windows
          - os: ubuntu-latest
            ext: ""
            label: linux
          - os: macos-13       # Intel
            ext: ""
            label: macos-intel
          - os: macos-latest   # ARM (M1/M2)
            ext: ""
            label: macos-arm

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # Windows/Linux/macOS CLI & GUI build
    - name: Build CLI
      run: |
        pyinstaller --onefile --hidden-import encoder --hidden-import decoder --name imgfile-cli cli.py

    - name: Build GUI
      run: |
        if [[ "${{ matrix.os }}" == windows* ]] || [[ "${{ matrix.os }}" == ubuntu* ]]; then
          pyinstaller --onefile --hidden-import encoder --hidden-import decoder --name imgfile-gui app.py
        else
          # macOS: make .app bundle
          pyinstaller --windowed --hidden-import encoder --hidden-import decoder --name imgfile-gui app.py
        fi

    # List dist folder for debug
    - name: List dist folder
      shell: bash
      run: |
        echo "Contents of dist:"
        ls -l dist || dir dist

    # Rename outputs to include OS label
    - name: Rename outputs
      shell: bash
      run: |
        mkdir renamed
        # CLI
        if [[ "${{ matrix.os }}" == macos* ]]; then
          mv dist/imgfile-cli renamed/imgfile-cli-${{ matrix.label }}
          mv dist/imgfile-gui.app renamed/imgfile-gui-${{ matrix.label }}.app
        else
          mv dist/imgfile-cli${{ matrix.ext }} renamed/imgfile-cli-${{ matrix.label }}${{ matrix.ext }}
          mv dist/imgfile-gui${{ matrix.ext }} renamed/imgfile-gui-${{ matrix.label }}${{ matrix.ext }}
        fi

    # Create DMG for macOS GUI
    - name: Create macOS DMG
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install create-dmg
        create-dmg "renamed/imgfile-gui-${{ matrix.label }}.app" \
                   --overwrite \
                   --dmg-title "imgfile-gui-${{ matrix.label }}" \
                   "renamed"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ matrix.label }}
        path: renamed/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List all artifacts
      run: ls -R ./artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.0-build-${{ github.run_id }}
        name: Automatic Build ${{ github.run_id }}
        body: |
          Automatic release built from commit ${{ github.sha }}

          Includes executables for:
          - Windows (.exe)
          - Linux (no extension)
          - macOS Intel (.app + .dmg)
          - macOS ARM (.app + .dmg)
        files: ./artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
